// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/VisionDrive.h"
#include <iostream>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Create global variables for network tables
auto inst = nt::NetworkTableInstance::GetDefault();
auto table = inst.GetTable("VisionTable");

VisionDrive::VisionDrive(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

/**
 * @brief Called just before this Command runs the first time
 */
void VisionDrive::Initialize() {
    table->GetEntry("automove").SetBoolean(false);
}

/**
 * @brief Called repeatedly when this Command is scheduled to run
 * This is a test comment for doxygen code documentation!
 */
void VisionDrive::Execute() {
    // double e_Target = getVisionError();
    // double distance = getDistanceToTarget();
    // double h_pix_L = getTargetPixelHeightLeft();
    // double h_pix_R = getTargetPixelHeightRight();
    
    // Publish automove flag to true while this code is running
    table->GetEntry("automove").SetBoolean(true);

    double fl_distance = getFloorLineDistance();
    double vt_distance = getDistanceToTarget();
    double fl_angle = getFloorLineAngle();
    double vt_angle = getTargetAngleDiff();
    double fl_error = getFloorLineError();
    double vt_error = getVisionError();

    bool usingVT = true;
    if (usingVT) {      // True: Steering using vision target
        Robot::driveTrain->VisionSteerController(vt_angle, vt_error, vt_distance);
    }
    else {              // False: Steering using floor lines
        Robot::driveTrain->VisionSteerController(fl_angle, fl_error, fl_distance);
    }
}

/**
 * @brief Make this return true when this Command no longer needs to run execute()
 * 
 * @return false (by default)
 */
bool VisionDrive::IsFinished() {
    return false;
}

/**
 * @brief Called once after isFinished returns true
 */
void VisionDrive::End() {
    table->GetEntry("automove").SetBoolean(false);
}

/**
 * Called when another command which requires one or more of the same subsystems is scheduled to run
 */
void VisionDrive::Interrupted() {

}

/**
 * @brief Get the x_target_error from VisionTable NetworkTable
 * 
 * @return x_target_error 
 */
double VisionDrive::getVisionError() {
    return table->GetEntry("x_target_error").GetDouble(0);
}

/**
 * @brief Get the distance to target from VisionTable NetworkTable
 * 
 * @return distance_to_target 
 */
double VisionDrive::getDistanceToTarget() {
    return table->GetEntry("distance_to_target").GetDouble(0);
}

/**
 * @brief Get the height of the left vision target from VisionTable NetworkTable
 * 
 * @return left_tape_height 
 */
double VisionDrive::getTargetPixelHeightLeft() {
    return table->GetEntry("left_tape_height").GetDouble(0);
}

/**
 * @brief Get the height of the right vision target from VisionTable NetworkTable
 * 
 * @return right_tape_height 
 */
double VisionDrive::getTargetPixelHeightRight() {
    return table->GetEntry("right_tape_height").GetDouble(0);
}

/**
 * @brief Get the difference between the vision target angles from VisionTable NetworkTable
 * 
 * @return right_tape_height 
 */
double VisionDrive::getTargetAngleDiff() {
    return table->GetEntry("tape_align_error").GetDouble(0);
}

/**
 * @brief Get the floor line angle from VisionTable NetworkTable
 * 
 * @return fl_target_angle 
 */
double VisionDrive::getFloorLineAngle() {
    return table->GetEntry("fl_target_angle").GetDouble(0);
}

/**
 * @brief Get the floor line angle from VisionTable NetworkTable
 * 
 * @return fl_target_angle 
 */
double VisionDrive::getFloorLineDistance() {
    return table->GetEntry("fl_target_Distance").GetDouble(0);
}

/**
 * @brief Get the floor line error from VisionTable NetworkTable
 * 
 * @return fl_target_error
 */
double VisionDrive::getFloorLineError() {
    return table->GetEntry("fl_target_error").GetDouble(0);
}