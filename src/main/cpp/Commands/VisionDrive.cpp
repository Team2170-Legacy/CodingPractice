// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/VisionDrive.h"
#include <iostream>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

VisionDrive::VisionDrive(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::vision.get());
    Requires(Robot::driveTrain.get());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

/**
 * @brief Called just before this Command runs the first time
 */
void VisionDrive::Initialize() {
    Robot::vision->automove.SetBoolean(false);
}

/**
 * @brief Called repeatedly when this Command is scheduled to run
 * 
 */
void VisionDrive::Execute() {
 
    
    // Publish automove flag to true while this code is running
    if (Robot::vision->targetLocked())
    {
        Robot::vision->automove.SetBoolean(true);
    

        double x_angle_error = Robot::vision->getXAngleToPowerport();
        double distanceFromTarget = Robot::vision->getDistanceToPowerport();
        Robot::vision->distance.SetDouble(distanceFromTarget);
        Robot::driveTrain->VisionSteerController(x_angle_error, distanceFromTarget);
    }

}

/**
 * @brief Make this return true when this Command no longer needs to run execute()
 * 
 * @return false (by default)
 */
bool VisionDrive::IsFinished() {
    return false;
}

/**
 * @brief Called once after isFinished returns true
 */
void VisionDrive::End() {
     Robot::vision->automove.SetBoolean(false);
}

/**
 * Called when another command which requires one or more of the same subsystems is scheduled to run
 */
void VisionDrive::Interrupted() {
    Robot::vision->automove.SetBoolean(false);
}


