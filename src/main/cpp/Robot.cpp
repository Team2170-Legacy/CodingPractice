// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

#include <hal/FRCUsageReporting.h>

#include <frc/Commands/Scheduler.h>
#include <frc/SmartDashboard/SmartDashboard.h>

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<Intake> Robot::intake; //done
std::shared_ptr<Climber> Robot::climber; //done
std::shared_ptr<Vision> Robot::vision;
std::shared_ptr<Shooter> Robot::shooter; //done
std::shared_ptr<Feeder> Robot::feeder;
std::shared_ptr<Loader> Robot::loader; //done
std::unique_ptr<OI> Robot::oi; //added correct commands to buttons
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

bool Robot::targetLocked = false;
bool Robot::visionDriveActive = false;
double Robot::distance = 0;
double Robot::distanceError = 0;
double Robot::angleError = 0;
double Robot::visionSpeed = 0;
double Robot::visionOmega = 0;

void Robot::RobotInit() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveTrain.reset(new DriveTrain());
	intake.reset(new Intake());
	climber.reset(new Climber());
	vision.reset(new Vision());
	shooter.reset(new Shooter());
	feeder.reset(new Feeder());
	loader.reset(new Loader());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their Requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	HAL_Report(HALUsageReporting::kResourceType_Framework,
		HALUsageReporting::kFramework_RobotBuilder);

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


	chooser.SetDefaultOption("Autonomous Command", new AutonomousCommand());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);

	visionLogger = new DataLogger();
	visionLogger->VisionLogger("/home/lvuser/VisionLogs/Vision_Log_" + DataLogger::GetTimestamp() + ".csv");
	visionLogger->StartSession();
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	visionLogger->EndSession();
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();

	
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();

	if (!visionDriveActive)
	{
		if (Robot::vision->TargetIsLocked())
		{
			
				// calulate distance error
				Robot::vision->optimalShootingDistance = frc::Preferences::GetInstance()->GetDouble("Optimal Shooting Distance", Robot::vision->optimalShootingDistance);
				double distanceFromTarget = Robot::vision->GetDistanceToPowerport();
				Robot::vision->distance.SetDouble(distanceFromTarget);
				double distanceError =  Robot::vision->optimalShootingDistance - distanceFromTarget;

				// get angle error
				double xAngleError = Robot::vision->GetXAngleToTarget();

				Robot::targetLocked = true;
				Robot::distance = distanceFromTarget;
				Robot::distanceError = distanceError;
				Robot::angleError = xAngleError;
				Robot::visionSpeed = 0;
				Robot::visionOmega = 0;
			
		}
		else 
		{
			Robot::targetLocked = false;
			Robot::distance = 0;
			Robot::distanceError = 0;
			Robot::angleError = 0;
			Robot::visionSpeed = 0;
			Robot::visionOmega = 0;
		}
	}
	visionLogger->WriteVisionData(targetLocked, visionDriveActive, distance, distanceError, angleError, visionSpeed, visionOmega);
}

#ifndef RUNNING_FRC_TESTS
int main(int argc, char** argv) {
    return frc::StartRobot<Robot>();
}
#endif