// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#pragma once

#include "frc/commands/Subsystem.h"
#include "networktables/NetworkTable.h"
#include "networktables/NetworkTableEntry.h"
#include "networktables/NetworkTableInstance.h"
#include "networktables/EntryListenerFlags.h"
#include "frc/WPILib.h"
#include "rev/CANSparkMax.h"

#include <math.h>

#define  Deg2Rad 3.14159/180
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

/**
 *
 *
 * @author ExampleAuthor
 */
class Vision: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	nt::NetworkTableEntry tx;
	nt::NetworkTableEntry ty;
	nt::NetworkTableEntry tv;
	nt::NetworkTableEntry tl;
	nt::NetworkTableEntry getPipe;
	nt::NetworkTableEntry ledMode;
	nt::NetworkTableEntry camMode;
	nt::NetworkTableEntry setPipe;
	nt::NetworkTableEntry snapshot;
	

	const double  powerportVisionTargetHeight= (6 + 9.25/12) + (1 + 5.0/12)/2; // height of the center of the vision target (ft)
	const double cameraHeight = 21.0/12; // height that the camera is mounted at (ft)
	const double cameraAngle = 35; // angle camera is mounted at from horizontal (degrees)
	const double cameraDistanceFromFrontBumper = 15.0/12; 


public:
    enum Pipeline {powerport = 0};
	enum LEDMode {currentPipelineMode = 0, forceOff = 1, forceBlink = 2, forceOn = 3};
	nt::NetworkTableEntry automove;
	nt::NetworkTableEntry distance;

	Vision();
	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	bool targetLocked();
	double getXAngleToPowerport();
	double getDistanceToPowerport();
	double getLatency();
	void setLEDMode(LEDMode ledModeToSet);
	void setCamMode(bool visionProcessingEnabled);
	void setPipeline(Pipeline pipeline);

};

